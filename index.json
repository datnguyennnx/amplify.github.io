[
{
	"uri": "/1-introduce/1.1-aws-amplify/",
	"title": "AWS Amplify",
	"tags": [],
	"description": "",
	"content": "Welcome to AWS Amplify Hosting AWS Amplify is a set of purpose-built tools and features that enables frontend web and mobile developers to quickly and easily build full-stack applications on AWS. Amplify provides two services: Amplify Hosting and Amplify Studio. Amplify Hosting provides a git-based workflow for hosting full-stack serverless web apps with continuous deployment. This user guide provides the information you need to get started with Amplify Hosting.\nAmplify Hosting features Amplify Hosting supports the common SPA frameworks, for example, React, Angular, Vue.js, Ionic, and Ember, as well as static site generators like Gatsby, Eleventy, Hugo, VuePress, and Jekyll.\nManage production and staging environments for your frontend and backend by connecting new branches. See, feature branch deployments..\nConnect your application to a custom domain. See, set up custom domain.\nDeploy and host SSR web apps. Amplify Hosting automatically detects applications created using the Next.js framework. ( We\u0026rsquo;ll discuss this in Chapter 4. There are some bugs detecting wrong builds for Next.js 14 in Amplify and we will have a temporary fix.) Issue here.\nAmplify also supports any Javascript based SSR framework with an open-source build adapter that transforms an application\u0026rsquo;s build output into the directory structure that Amplify Hosting expects. An adapter is available for deploying a Nuxt application to Amplify.\nPreview changes during code reviews by setting up pull request previews.\nImprove your app quality with end to end tests. See, end-to-end testing.\nPassword protect your web app so you can work on new features without making them publicly accessible. See, restricting access.\nSet up rewrites and redirects to maintain SEO rankings and route traffic based on your client app requirements. See, using redirects.\nAtomic deployments eliminate maintenance windows by ensuring that the web app is updated only after the entire deployment finishes. This eliminates scenarios where files fail to upload properly.\nNote: All services are managed by Amplify, we can see how the service runs under Amplify, what are the resources used? Then Amplify integrates CloudWatch service for us to manage, click on All metric in the sidebar and select Usage and continue to select By AWS Resource.\n"
},
{
	"uri": "/1-introduce/1.2-aws-route-53/",
	"title": "AWS Route 53",
	"tags": [],
	"description": "",
	"content": "Overview Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service. You can use Route 53 to perform three main functions in any combination: domain registration, DNS routing, and health checking.\nIf you choose to use AWS Route 53 for all three functions, be sure to follow the order below:\nRegister domain names\nYour website needs a name, such as example.com. Route 53 lets you register a name for your website or web application, known as a domain name.\nFor an overview, see How domain registration works.. For a procedure, see Registering a new domain. For a tutorial that takes you through registering a domain and creating a simple website in an Amazon S3 bucket, see Getting started with Amazon Route 53. Route internet traffic to the resources for your domain\nWhen a user opens a web browser and enters your domain name (example.com) or subdomain name (acme.example.com) in the address bar, Route 53 helps connect the browser with your website or web application.\nFor an overview, see How internet traffic is routed to your website or web application. For procedures, see Configuring Amazon Route 53 as your DNS service. For a procedure on how to route email to Amazon WorkMail, see Routing traffic to Amazon WorkMail. Check the health of your resources\nRoute 53 sends automated requests over the internet to a resource, such as a web server, to verify that it\u0026rsquo;s reachable, available, and functional. You also can choose to receive notifications when a resource becomes unavailable and choose to route internet traffic away from unhealthy resources.\nFor an overview, see How Amazon Route 53 checks the health of your resources. For procedures, see Creating Amazon Route 53 health checks and configuring DNS failover. "
},
{
	"uri": "/1-introduce/1.3-godaddy-provider/",
	"title": "GoDaddy Provider",
	"tags": [],
	"description": "",
	"content": "Overview GoDaddy is the world’s largest services platform for entrepreneurs around the globe. We’re on a mission to empower our worldwide community of 20+ million customers — and entrepreneurs everywhere — by giving them all the help and tools they need to grow online.\nGoDaddy serves as a domain registrar — a company that sells, manages, and registers domain names. It’s an accredited registrar with the Internet Corporation for Assigned Names and Numbers (ICANN), the domain registration governing body, and a popular choice for domain registration services.\nBeyond standard domain registration, GoDaddy also offers several other domain registration-related services:\nBulk Domain Search – If you want to purchase multiple domains at one time, GoDaddy offers a bulk domain purchasing option that will save you money. New Domain Extensions – If you want an extension other than the standard “.com,” “.org,” or “.net” options, GoDaddy can help you select the right fit from one of the new extensions available on the market. Domain Broker – If you have your heart set on a specific domain name, but someone else already owns it, GoDaddy offers broker services in which the company will try to negotiate the sale of that domain name to you. Domain Name Generator – If you’re a bit lost on what domain name to choose, GoDaddy has a domain name generator that can help. You simply enter a few keywords into the generator tool and it’ll provide a list of ideas. Domain Investing – GoDaddy offers a number of domain investing tools to help anyone interested in buying or selling domain names for a profit. Domain Back Order – As part of its domain investor tools, GoDaddy offers domain back order services. If you find a domain you like, but someone already owns it, you can put yourself on a waiting list should the domain name ever become available. Domain Transfer – If you previously registered your website’s domain name through another domain registrar (e.g., Namecheap or Doteasy) and you want to transfer it to GoDaddy, you can use GoDaddy’s domain transfer service. WHOIS – If you want to know who owns a specific domain name, you can use GoDaddy’s WHOIS search tool to find out. Domain Value Appraisal – If you think the domain name you already own might be worth some money, use GoDaddy’s domain value appraisal tool to learn its current value. Business Name Generator – GoDaddy also helps entrepreneurs come up with great names for their businesses. Use its business name generator to identify potential names for your new venture. Domain Auctions – GoDaddy offers domain auction services to both buyers and sellers. If you’re a domain investor or just want a coveted domain name, GoDaddy’s domain auction services might have the tools you need to succeed. "
},
{
	"uri": "/",
	"title": "Hosting static web with Amplify and Custom domain with Route 53.",
	"tags": [],
	"description": "",
	"content": "Hosting static web with Amplify and Custom domain with Route 53. Overview In this workshop, we will deploy 1 static web on the AWS Amplify service and configure the domain through the hosted zone of AWS Route 53. This demo will host the blog app SSG (Static Site Generation) Next.js 14 through AWS Amplify instead of hosting on Vercel. The domain is purchased at Godaddy, we will change the nameserver from AWS Route 53 provided through the Godaddy dashboard.\nContent Introduce Setup IAM Permission Hosted zone Amplify hosting static web Custom domain Testing CI/CD pipeline Resource cleanup "
},
{
	"uri": "/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Within the scope of this workshop, divide each phase:\nPhase 1: Configure IAM to assign Permission Policy users for different purposes. Phase 2: Configure Hosted zones to switch nameservers from AWS Route 53 replacing Godaddy\u0026rsquo;s nameserver. Phase 3: Steps to prepare for the repository on github and configure to AWS Amplify. Phase 4: Configure your domain and create certificates automatically by AWS Amplify. Phase 5: We will push 1 new commit up to check if CI/CD pipeline of AWS Amplify is working properly (For the scope of this workshop, we will push 2 new articles to the repository to see if Amplify triggers rebuild and down project when building?) Phase 6: Delete resources to avoid incurring costs. Source code here\n"
},
{
	"uri": "/2-iamrole/",
	"title": "IAM Policy",
	"tags": [],
	"description": "",
	"content": "In this section we will configure 2 users in IAM with certain permissions:\nAmplifyDev is for developers who have permission to use AWS Amplify service to configure CI/CD and hosting Next.js app. AdminUser for larger roles to configure global services (within the scope of the workshop is AWS Route53 service) Step 1: On the homepage of aws.amazon.com, click the search bar and type IAM. Step 2: In the AWS Dashboard, click User and select Create user. Step 3: Create user infomation AmplifyDev and select Next. Step 4: For config AmplifyDev permission, then search AdministratorAccess-Amplify và tick a box for assign permission for user and select Next. Step 5: Overview user information and permission policy then select Create user. Step6 6: Download the csv file to store user information and select Return to user list to return to the dashboard. Repeat with user AdminUser\nStep 1: Create AdminUser user information and select Next. Step 2: Limit permissions to AdminUser, search AdministratorAccess and tick the box to assign permissions to the user and select Next to continue. Step 3: Check the overall username and permissions of the user and select Create user. Step 4: Download the csv file to store user information and select Return to user list to return to the dashboard. Check the results in IAM Dashboard NOTE: We clearly decentralize permissions to strictly manage services that groups of users can use AWS services for the right purpose.\n"
},
{
	"uri": "/3-hostedzone/",
	"title": "Create Hosted zone ",
	"tags": [],
	"description": "",
	"content": "Here to configure for Route 53, log in to IAM AdminUser account.\nIn the AWS Dashboard, click on the search bar and search for the Route 53 service. Here, we select Hosted Zone and select Create hosted zone. In this form, we need to enter the domain name that matches the domain name you bought at Godaddy, then select Public hosted zone. After creating information for the hosted zone, we pay attention to Type NS (Nameserver), we pay attention to these values to configure via Godaddy. Let\u0026rsquo;s go to Godaddy dashboard, click on the Profile of the Godaddy dashboard, then click on the domain name you own. Select the DNS tab and the Nameservers section. By default, this is Godaddy\u0026rsquo;s nameserver, we will change the nameservers of AWS Route 53 to replace the nameservers of Godaddy. First, turn on the terminal to check which nameserver your domain is pointing to. Here, we select Change Nameserver. Select I\u0026rsquo;ll use my own nameservers. Then we\u0026rsquo;ll get all the values in the Type NS section of Route 53 to fill in each row.\nWe will then confirm the use of the nameserver from 1 other party. We will check again with nslookup -q=ns your-domain. "
},
{
	"uri": "/4-amplifyhosting/4.1-deploycode/",
	"title": "Amplify Hosting",
	"tags": [],
	"description": "",
	"content": "Hosting Amplify App First of all, exit the IAM AdminUser account and login back in with the IAM AmplifyDev account.\nExecute the command below clone about the demo blog repository, at line 3 we will return to the commit that I setup for Amplify detect this is build SSG app. Then create 1 new repository on github and push the code up. Depending on the main or master branch, you push to the branch you want.\ngit clone https://github.com/hallucinationguys/blog cd blog git checkout 074a3c6 rmdir -force .\\.git\\ git init git add . git commit -m \u0026#34;config(deploy): AWS Amplify detect SSG build\u0026#34; git branch -M main git remote add origin https://github.com/your-repository/your-name-repository.git git push -f origin main We will set up the package.json file like this to Amplify detect this is the SSG app build. But we will still build wrong because Next.js 14 does not build like that.\n\u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;next dev\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;next build \u0026amp;\u0026amp; next export\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;next start\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;prettier -c --write \\\u0026#34;*/**\\\u0026#34;\u0026#34;, \u0026#34;lint\u0026#34;: \u0026#34;eslint . --ext .ts,.tsx,\u0026#34;, \u0026#34;lint:fix\u0026#34;: \u0026#34;eslint . --ext .ts,.tsx, --fix\u0026#34; }, After pushing the code up on github. We will configure Amplify to receive the repository from github.\nIn the AWS dashboard, select the search bar and search for Amplify. Scroll down below, under Amplify Hosting and select get started. Amplify will ask to choose where its source code is contained, here we select Github. If you first use the Amplify service, Amplify will redirect to github to request permission to access your source code. Here select Organization or your personal account, which contains the source code you pushed to github. We can give Amplify permission to access multiple repositories or only 1 repository, here we select All repository After configuring Amplify with github, we will select the repository we want to build in Recently updated repositories and select Next to continue. Select Edit to edit the file amplify.yml We configure the amplify.yml file as follows:\nversion: 1 frontend: phases: preBuild: commands: - npm install -g pnpm - pnpm install build: commands: - pnpm build artifacts: baseDirectory: out files: - \u0026#39;**/*\u0026#39; cache: paths: - \u0026#39;node_modules/**/*\u0026#39; - \u0026#39;.next/cache/**/*\u0026#39; We completed the correct SSG app build. Because in package.json I set up as follows.\n\u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;next dev\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;next build \u0026amp;\u0026amp; next export\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;next start\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;prettier -c --write \\\u0026#34;*/**\\\u0026#34;\u0026#34;, \u0026#34;lint\u0026#34;: \u0026#34;eslint . --ext .ts,.tsx,\u0026#34;, \u0026#34;lint:fix\u0026#34;: \u0026#34;eslint . --ext .ts,.tsx, --fix\u0026#34; }, Next.js 14 will build incorrectly for the reason that The \u0026ldquo;next export\u0026rdquo; command has been removed in favor of \u0026ldquo;output: export\u0026rdquo; in next.config.js, for the reason please read the log build stage. This is a build error of Next.js 14. We will fix package.json to the config build standard of Next.js 14 to fix this error. In folder blog on the computer, we edit 2 files, package.json and next.config.mjs\n\u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;next dev\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;next build\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;next start\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;prettier -c --write \\\u0026#34;*/**\\\u0026#34;\u0026#34;, \u0026#34;lint\u0026#34;: \u0026#34;eslint . --ext .ts,.tsx,\u0026#34;, \u0026#34;lint:fix\u0026#34;: \u0026#34;eslint . --ext .ts,.tsx, --fix\u0026#34; }, /** @type {import(\u0026#39;next\u0026#39;).NextConfig} */ const nextConfig = { output: \u0026#39;export\u0026#39;, reactStrictMode: true, swcMinify: true, images: { unoptimized: true, }, } export default nextConfig Check for differences after modifying files type git diff command. Then we will create 1 new commit and push the code to the repository. Amplify will trigger a CI/CD rebuild to build the code and deploy.\ngit diff git add . git commit -m \u0026#34;fixed(config): SSG correct build\u0026#34; git push -f origin main In the sidebar, select Rewrites and redirect. Select Edit, in the Type section select 404(Redirect) and the Target address section points to the 404.html file s Amplify has deployed SSG app on the internet, in the next section we will customize the domain with Godaddy. "
},
{
	"uri": "/4-amplifyhosting/",
	"title": "Hosting trên Amplify",
	"tags": [],
	"description": "",
	"content": "Detect error from Amplify The problem is mentioned in Chapter 1 - Introduction to Amplify, We have a problem to solve when deploying code on top of Amplify and Amplify creates a build for SSR app instead of SSG app as we want. Here, I will describe the error detect build SSR app and build SSG app in Amplify and how to fix it.\nBelow folder after build of Next.js 14. Self-Hosting and we notice this detail Static Exports from the document of Next.js 14 And this is how Amplify detect Next.js your app is SSR app or SSG app. Amplify documentation. =\u0026gt; We realize that Next.js 14 and AWS Amplify are conflict together. We\u0026rsquo;ll look at how Amplify defines baseDirectory to deploy code. We will use this amplify.yml file for the workshop scope because this is the correct build config for the SSG app. Here is an example Amplify detect build SSG app wrong and build fail. Since in package.json configuration as below, this is the correct build config of Next.js 14. Which Amplify detect is build SSR app =\u0026gt; Build fail and cannot deploy. Here is the package.json file\n\u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;next dev\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;next build\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;next start\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;prettier -c --write \\\u0026#34;*/**\\\u0026#34;\u0026#34;, \u0026#34;lint\u0026#34;: \u0026#34;eslint . --ext .ts,.tsx,\u0026#34;, \u0026#34;lint:fix\u0026#34;: \u0026#34;eslint . --ext .ts,.tsx, --fix\u0026#34; }, In this error, Amplify is pointing to the out folder due to the amplify.yml file so that baseDirectory is out. Amplify can\u0026rsquo;t find the required-server-file.json file because it\u0026rsquo;s not an SSR build. Let\u0026rsquo;s compare the files after the Next build at the beginning, I mention the difference between the 2 builds. To fix the above error, we will follow in next section.\n"
},
{
	"uri": "/5-customdomain/",
	"title": "Custom domain",
	"tags": [],
	"description": "",
	"content": "For IAM AmplifyDev account, when selecting Domain management we cannot configure the domain for the app. Since Route 53 is a global service, we need to clearly assign permissions to each user, exit the IAM AmplifyDev account and login with the IAM AdminUser account After logging in, we will select Domain management, then select Configure domain and leave the default 2 subdomain pointing to the main branch. Select Amplify managed certificate to provide SSL for your web. Select Save to continue.\nOptional: In feature, we can create more subdomains pointing to other branches on the repository. For example, we create 1 dev branch on github and develop new features. At Domain management, we configure subdomain as dev and point to dev branch on repository github. We can visit dev.your-domain.com to see the features that are developing. Amplify will create a CNAME record in Route 53 and provide SSL for your web app. After about 15-30 minutes, we check the status of domain. Back in our app, URL has changed correctly with my domain configuration. Check the results. "
},
{
	"uri": "/6-pushcommit/",
	"title": "Testing CI/CD pipeline",
	"tags": [],
	"description": "",
	"content": "We will push up on github 2 new articles. Amplify will recognize the change of the repository on github and proceed to rebuild the app. After building we will check the result. Next.js has collected some information to make the app easier to monitor. Why is telemetry collected? Note: During the Amplify trigger app rebuild, if you reload your page during the build process, there will be no downtime (Atomic deployments). In the introduction to Amplify there is a mention of how AWS resources are used. Then Amplify has integrated CloudWatch service for us to manage, click on All metric in the sidebar and select Usage and continue to select By AWS Resource. "
},
{
	"uri": "/7-cleanup/",
	"title": "Clean up resources ",
	"tags": [],
	"description": "",
	"content": "Clean up resources We will proceed to delete the resources in the following order:\nDelete the project on Amplify. Delete the CNAME record created by Amplify in Route 53. Delete the hosted zone in Route 53. Delete users in IAM. In the Amplify dashboard, select blog and select Action, continue to select Delete app. Type delete to confirm the deletion. Popup notifying successful deletion of project. In Route 53 dashboard, select Hosted zone and select the domain we are using. Select the CNAME record created by Amplify and select Delete record. Select delete to confirm the deletion. Go back to Route 53 dashboard, select the currently used hosted zone and select Delete. Type delete to confirm the deletion. In the IAM dashboard, select 2 users AmplifyDev and AdminUser and select Delete. Type delete to confirm the deletion. We have finished deleting all resources in use.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]