[
{
	"uri": "/vi/1-introduce/1.1-aws-amplify/",
	"title": "AWS Amplify",
	"tags": [],
	"description": "",
	"content": "Giới thiệu về AWS Amplify AWS Amplify là một bộ công cụ và tính năng được xây dựng có mục đích cho phép các nhà phát triển frontend và mobile xây dựng các ứng dụng full-stack trên AWS một cách nhanh chóng và dễ dàng. Amplify cung cấp hai dịch vụ: Amplify Hosting và Amplify Studio. Amplify Hosting cung cấp git-based workflow để lưu trữ full-stack serverless web apps với quá trình triển khai liên tục. Dưới đây mình sẽ cung cấp thông tin bạn cần để bắt đầu với Amplify Hosting.\nBạn có thể làm những gì với AWS Amplify Hosting? Amplify Hosting hỗ trợ các SPA ( Single Page Application ) frameworks phổ biến, chẳng hạn như React, Angular, Vue.js, Ionic và Ember, cũng như các SSG ( Static Site Generator ) như Gatsby, Eleventy, Hugo, VuePress và Jekyll.\nQuản lý môi trường production và staging cho frontend và backend của bạn bằng cách kết nối các branches mới. Xem feature branch deployments.\nKết nối ứng dụng của bạn với một custom domain. Xem, set up custom domain.\nTriển khai và lưu trữ các ứng dụng web SSR. Amplify Hosting tự động phát hiện các ứng dụng được tạo bằng Next.js framework. ( chúng ta sẽ bàn luận về phần này ở Chapter 4. Có 1 số bug detect build sai đối với Nextjs 14 trong Amplify và chúng ta sẽ có khắc phục tạm thời). Issue here.\nAmplify cũng hỗ trợ mọi SSR framwork dựa trên Javascript với open-source build adapter giúp chuyển đổi đầu ra bản build của ứng dụng thành cấu trúc thư mục mà Amplify Hosting mong đợi. An adapter sẵn sàng triển khai ứng dụng Nuxt lên Amplify.\nXem trước các thay đổi trong quá trình đánh giá code bằng cách thiết lập pull request previews.\nCải thiện chất lượng ứng dụng của bạn bằng các thử nghiệm từ end to end tests. Xem, end-to-end testing.\nMật khẩu bảo vệ ứng dụng web của bạn để bạn có thể làm việc trên các tính năng mới mà không làm cho chúng có thể truy cập công khai. Xem, hạn chế quyền truy cập.\nThiết lập viết lại và chuyển hướng để duy trì thứ hạng SEO và định tuyến lưu lượng truy cập dựa trên yêu cầu ứng dụng khách của bạn. Xem, sử dụng chuyển hướng.\nAtomic deployments loại bỏ các khoảng thời gian bảo trì bằng cách đảm bảo rằng ứng dụng web chỉ được cập nhật sau khi toàn bộ quá trình triển khai kết thúc. Điều này giúp loại bỏ các tình huống trong đó tệp không được tải lên đúng cách.\nNote: Tất cả dịch vụ đều được Amplify quản lý, chúng ta có thể xem dịch vụ chạy bên dưới Amplify như thế nào, tài nguyên được dùng là gì? Thì Amplify có tích hợp CloudWatch service cho chúng ta quản lý, click vào All metric tại sidebar và chọn Usage và tiếp tục chọn By AWS Resource.\n"
},
{
	"uri": "/vi/1-introduce/1.2-aws-route-53/",
	"title": "AWS Route 53",
	"tags": [],
	"description": "",
	"content": "Overview Amazon Route 53 là một dịch vụ web Domain Name System (DNS) có tính sẵn sàng cao và có thể mở rộng. Bạn có thể sử dụng AWS Route 53 để thực hiện ba chức năng chính trong bất kỳ sự kết hợp nào: đăng ký tên miền, định tuyến DNS và kiểm tra tình trạng.\nNếu bạn chọn sử dụng AWS Route 53 cho cả ba chức năng, hãy đảm bảo làm theo thứ tự dưới đây:\nĐăng ký tên miền\nTrang web của bạn cần một cái tên, chẳng hạn như example.com. AWS Route 53 cho phép bạn đăng ký tên cho trang web hoặc ứng dụng web của mình, được gọi là tên miền.\nĐể biết tổng quan, hãy xem How domain registration works.. Để biết thủ tục, hãy xem Registering a new domain. Để biết hướng dẫn hướng dẫn bạn cách đăng ký miền và tạo trang web đơn giản trong vùng lưu trữ Amazon S3, hãy xem Getting started with Amazon Route 53. Định tuyến lưu lượng truy cập internet đến các tài nguyên cho miền của bạn\nKhi người dùng mở trình duyệt web và nhập tên miền (example.com) hoặc tên miền phụ (acme.example.com) của bạn vào thanh địa chỉ, AWS Route 53 sẽ giúp kết nối trình duyệt với trang web hoặc ứng dụng web của bạn.\nĐể biết tổng quan, hãy xem How internet traffic is routed to your website or web application. Để biết quy trình, hãy xem Configuring Amazon Route 53 as your DNS service. Để biết quy trình về cách định tuyến email đến Amazon WorkMail, hãy xem Routing traffic to Amazon WorkMail. Kiểm tra tình trạng tài nguyên của bạn\nAWS Route 53 gửi các yêu cầu tự động qua internet đến một tài nguyên, chẳng hạn như máy chủ web, để xác minh rằng nó có thể truy cập được, có sẵn và hoạt động. Bạn cũng có thể chọn nhận thông báo khi tài nguyên không khả dụng và chọn định tuyến lưu lượng truy cập internet khỏi các tài nguyên không lành mạnh.\nĐể biết tổng quan, hãy xem How Amazon Route 53 checks the health of your resources. Để biết quy trình, hãy xem Creating Amazon Route 53 health checks and configuring DNS failover. "
},
{
	"uri": "/vi/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Ở trong phạm vi workshop này, chia từng giai đoạn:\nGiai đoạn 1: Cấu hình IAM để phân quyền cho các user với các mục đích khác nhau Giai đoạn 2: Cấu hình Hosted zones để chuyển đổi nameserver từ AWS Route 53 thay thế cho nameserver của Godaddy. Giai đoạn 3: Các bước chuẩn bị cho repository trên github và cấu hình vào AWS Amplify. Giai đoạn 4: Cấu hình domain của mình và cấp certificate tự động bởi AWS Amplify. Giai đoạn 5: Chúng ta sẽ đẩy 1 commit mới lên để kiểm tra xem CI/CD của AWS Amplify có hoạt động đúng không ( Phạm vi workshop này, ta sẽ push 2 articles mới lên repository xem Amplify có trigger build lại và bị down project khi build không? ) Giai đoạn 6: Xóa tài nguyên để tránh chịu chi phí. Source code ở đây\n"
},
{
	"uri": "/vi/",
	"title": "Hosting web tĩnh trên AWS Amplify và cấu hình domain thông qua AWS Route 53",
	"tags": [],
	"description": "",
	"content": "Hosting web tĩnh trên AWS Amplify và cấu hình domain thông qua Route 53. Tổng quan Trong workshop này, chúng ta sẽ triển khai 1 web tĩnh trên dịch vụ AWS Amplify và cấu hình domain thông qua hosted zone của AWS Route 53. Demo này sẽ host blog app SSG (Static Site Generation) Next.js 14 thông qua AWS Amplify thay vì host trên Vercel. Domain đuợc mua ở Godaddy, chúng ta sẽ thay đổi nameserver từ AWS Route 53 cung cấp qua Godaddy dashboard.\nNội dung Giới thiệu Cấu hình IAM Permission Cấu hình Hosted zone Amplify hosting web tĩnh Cấu hình custom domain Kiểm tra CI/CD Dọn dẹp tài nguyên "
},
{
	"uri": "/vi/1-introduce/1.3-godaddy-provider/",
	"title": "Nhà cung cấp domain Godaddy",
	"tags": [],
	"description": "",
	"content": "Overview GoDaddy là nền tảng dịch vụ lớn nhất thế giới dành cho các doanh nhân trên toàn cầu. Godaddy đang thực hiện sứ mệnh trao quyền cho cộng đồng 20+ triệu khách hàng trên toàn thế giới — và các doanh nhân ở khắp mọi nơi — bằng cách cung cấp cho họ tất cả sự trợ giúp và công cụ họ cần để phát triển trực tuyến.\nGoDaddy đóng vai trò là công ty đăng ký tên miền — một công ty bán, quản lý và đăng ký tên miền. Đây là một công ty đăng ký được công nhận với Internet Corporation for Assigned Names and Numbers (ICANN), cơ quan quản lý đăng ký tên miền và là lựa chọn phổ biến cho các dịch vụ đăng ký miền.\nNgoài đăng ký tên miền tiêu chuẩn, GoDaddy còn cung cấp một số dịch vụ liên quan đến đăng ký tên miền khác:\nTìm kiếm tên miền hàng loạt - Nếu bạn muốn mua nhiều miền cùng một lúc, GoDaddy cung cấp tùy chọn mua miền số lượng lớn sẽ giúp bạn tiết kiệm tiền. Phần mở rộng tên miền mới - Nếu bạn muốn có một tiện ích mở rộng khác với các tùy chọn \u0026ldquo;.com\u0026rdquo;, \u0026ldquo;.org\u0026rdquo; hoặc \u0026ldquo;.net\u0026rdquo; tiêu chuẩn, GoDaddy có thể giúp bạn chọn phù hợp từ một trong những tiện ích mở rộng mới có sẵn trên thị trường. Nhà môi giới tên miền - Nếu bạn đặt tâm huyết của mình vào một tên miền cụ thể, nhưng người khác đã sở hữu nó, GoDaddy cung cấp các dịch vụ môi giới trong đó công ty sẽ cố gắng thương lượng việc bán tên miền đó cho bạn. Trình tạo tên miền - Nếu bạn hơi bối rối về việc chọn tên miền nào, GoDaddy có trình tạo tên miền có thể trợ giúp. Bạn chỉ cần nhập một vài từ khóa vào công cụ tạo và nó sẽ cung cấp danh sách các ý tưởng. Đầu tư tên miền - GoDaddy cung cấp một số công cụ đầu tư tên miền để giúp bất kỳ ai quan tâm đến việc mua hoặc bán tên miền để kiếm lợi nhuận. Đặt hàng lại tên miền - Là một phần của công cụ đầu tư tên miền của mình, GoDaddy cung cấp dịch vụ đặt hàng lại tên miền. Nếu bạn tìm thấy một tên miền bạn thích, nhưng ai đó đã sở hữu nó, bạn có thể đưa mình vào danh sách chờ nếu tên miền đó có sẵn. Chuyển tên miền - Nếu trước đây bạn đã đăng ký tên miền trang web của mình thông qua một công ty đăng ký tên miền khác (ví dụ: Namecheap hoặc Doteasy) và bạn muốn chuyển nó sang GoDaddy, bạn có thể sử dụng dịch vụ chuyển miền của GoDaddy. WHOIS - Nếu bạn muốn biết ai sở hữu một tên miền cụ thể, bạn có thể sử dụng công cụ tìm kiếm WHOIS của GoDaddy để tìm hiểu. Thẩm định giá trị tên miền - Nếu bạn nghĩ rằng tên miền bạn đã sở hữu có thể đáng giá một số tiền, hãy sử dụng công cụ thẩm định giá trị miền của GoDaddy để tìm hiểu giá trị hiện tại của nó. Trình tạo tên doanh nghiệp - GoDaddy cũng giúp các doanh nhân đưa ra những cái tên tuyệt vời cho doanh nghiệp của họ. Sử dụng trình tạo tên doanh nghiệp của nó để xác định tên tiềm năng cho liên doanh mới của bạn. Đấu giá tên miền - GoDaddy cung cấp dịch vụ đấu giá tên miền cho cả người mua và người bán. Nếu bạn là nhà đầu tư tên miền hoặc chỉ muốn có một tên miền đáng thèm muốn, các dịch vụ đấu giá miền của GoDaddy có thể có các công cụ bạn cần để thành công. "
},
{
	"uri": "/vi/2-iamrole/",
	"title": "Phân quyền IAM ",
	"tags": [],
	"description": "",
	"content": "Trong phần này chúng ta sẽ cấu hình 2 user trong IAM với quyền hạn nhất định:\nAmplifyDev dành cho các dev có quyền sử dụng dịch vụ AWS Amplify để config CI/CD và hosting Next.js app. AdminUser dành cho các vai trò lớn hơn để config các dịch vụ global (trong phạm vi workshop là dịch vụ AWS Route53) Bước 1: Ở trang chủ của aws.amazon.com, click thanh tìm kiếm và nhập IAM. Bước 2: Ở trang IAM dashboard, click User và chọn Create user. Bước 3: Tạo thông tin user AmplifyDev và chọn Next. Bước 4: Giới hạn quyền cho AmplifyDev, search AdministratorAccess-Amplify và tick vào ô để gán quyền cho user và chọn Next để tiếp tục. Bước 5: Kiểm tra tổng thể lại username và quyền hạn của user và chọn Create user. Bước 6: Tải về file csv để lưu trữ thông tin user và chọn Return to user list để trở về dashboard. Lặp lại các bước trên với AdminUser\nBước 1: Tạo thông tin user AdminUser và chọn Next. Bước 2: Giới hạn quyền cho AdminUser, search AdministratorAccess và tick vào ô để gán quyền cho user và chọn Next để tiếp tục. Bước 3: Kiểm tra tổng thể lại username và quyền hạn của user và chọn Create user. Bước 4: Tải về file csv để lưu trữ thông tin user và chọn Return to user list để trở về dashboard. Kiểm tra kết quả ở IAM Dashboard NOTE: Chúng ta phân quyền quyền rõ ràng để quản lý chặt chẽ các service mà các nhóm user có thể sử dụng các dịch vụ của AWS đúng mục đích.\n"
},
{
	"uri": "/vi/3-hostedzone/",
	"title": "Tạo Hosted Zone",
	"tags": [],
	"description": "",
	"content": "Ở đây để config cho Route 53, hãy đăng nhập tài khoản IAM AdminUser.\nỞ AWS Dashboard, click vào thanh search và tìm kiểm dịch vụ Route 53. Ở đây, ta chọn Hosted Zone và chọn Create hosted zone. Trong form này, chúng ta cần điền domain name trùng với tên miền mà bạn mua ở Godaddy, sau đó chọn Public hosted zone. Sau khi tạo thông tin cho hosted zone xong, chúng ta để ý tới Type NS (Nameserver), chúng ta để ý các giá trị này để cấu hình qua Godaddy. Chúng ta đến với Godaddy, click vào Profile của dashboard Godaddy, sau đó click vào tên miền của bạn đang sở hữu. Chọn tab DNS và phần Nameservers. Mặc định đây là nameserver của Godaddy, chúng ta sẽ thay đổi nameservers của AWS Route 53 thay thế cho nameservers của Godaddy. Trước hết, hãy bật terminal lên check xem domain của mình đang trở tới nameserver nào. Ở đây, chúng ta chọn Change Nameserver. Chọn I\u0026rsquo;ll use my own nameservers. Sau đó chúng ta sẽ lấy tất cả giá trị trong phần Type NS của Route 53 điền vào từng ô. Sau đó chúng ta sẽ xác nhận lại việc sử dụng nameserver từ 1 bên khác. Chúng ta sẽ kiểm tra lại 1 lần nữa bằng nslookup -q=ns your-domain. "
},
{
	"uri": "/vi/4-amplifyhosting/4.1-deploycode/",
	"title": "Deploy code lên Amplify",
	"tags": [],
	"description": "",
	"content": "Hosting Amplify App Trước hết hãy thoát tài khoản IAM AdminUser và đăng nhập lại bằng tài khoản IAM AmplifyDev.\nThực hiện câu lệnh dưới đây clone về repository blog demo, tại dòng số 3 chúng ta sẽ quay về commit mà mình setup sẵn cho Amplify detect được đây là build SSG app. Sau đó tạo 1 repository mới trên github và push code lên. Tùy vào nhánh main hay master, các bạn push vào branch mình mong muốn.\ngit clone https://github.com/hallucinationguys/blog cd blog git checkout 074a3c6 rmdir -force .\\.git\\ git init git add . git commit -m \u0026#34;config(deploy): AWS Amplify detect SSG build\u0026#34; git branch -M main git remote add origin https://github.com/your-repository/your-name-repository.git git push -f origin main Chúng ta sẽ setup file package.json như thế này để Amplify detect đây là build SSG app. Nhưng chúng ta sẽ vẫn build sai do Next.js 14 không build như vậy.\n\u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;next dev\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;next build \u0026amp;\u0026amp; next export\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;next start\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;prettier -c --write \\\u0026#34;*/**\\\u0026#34;\u0026#34;, \u0026#34;lint\u0026#34;: \u0026#34;eslint . --ext .ts,.tsx,\u0026#34;, \u0026#34;lint:fix\u0026#34;: \u0026#34;eslint . --ext .ts,.tsx, --fix\u0026#34; }, Sau khi push code lên trên github. Chúng ta sẽ cấu hình Amplify nhận repository từ github.\nỞ AWS dashboard, chọn thanh search và tìm kiếm Amplify. Kéo xuống bên dưới, ở phần Amplify Hosting và chọn get started. Amplify sẽ yêu cầu chọn source code của mình chứa ở đâu, ở đây chúng ta chọn Github. Nếu lần đầu tiên bạn sử dụng dịch vụ Amplify, Amplify sẽ chuyển hướng tới github để yêu cầu cung cấp quyền hạn truy cập vào source code của bạn. Ở đây hãy chọn Tổ chức hay tài khoản cá nhân của bạn, nơi chứa source code bạn đẩy lên github. Chúng ta có thể cung cấp cho Amplify được phép truy cập nhiều repository hay chỉ 1 repository, ở đây mình chọn All repository Sau khi cấu hình xong Amplify với github, chúng ta sẽ chọn repository mà mình muốn build ở Recently updated repositories và chọn Next để tiếp tục. Chọn Edit để chỉnh sửa file amplify.yml Chúng ta cấu hình file amplify.yml như sau:\nversion: 1 frontend: phases: preBuild: commands: - npm install -g pnpm - pnpm install build: commands: - pnpm build artifacts: baseDirectory: out files: - \u0026#39;**/*\u0026#39; cache: paths: - \u0026#39;node_modules/**/*\u0026#39; - \u0026#39;.next/cache/**/*\u0026#39; Chúng ta hoàn thành việc AWS Amplify detect đúng build SSG app. Do trong package.json mình setup như sau.\n\u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;next dev\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;next build \u0026amp;\u0026amp; next export\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;next start\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;prettier -c --write \\\u0026#34;*/**\\\u0026#34;\u0026#34;, \u0026#34;lint\u0026#34;: \u0026#34;eslint . --ext .ts,.tsx,\u0026#34;, \u0026#34;lint:fix\u0026#34;: \u0026#34;eslint . --ext .ts,.tsx, --fix\u0026#34; }, Next.js 14 sẽ build sai với lí do là The \u0026ldquo;next export\u0026rdquo; command has been removed in favor of \u0026ldquo;output: export\u0026rdquo; in next.config.js, để biết nguyên nhân hãy đọc log build stage. Đây là lỗi build của Next.js 14. Chúng ta sẽ sửa package.json về chuẩn config build của Next.js 14 thì sẽ fix được lỗi này. Ở folder blog trên máy tính, chúng ta tiến hành sửa 2 file, package.json và next.config.mjs\n\u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;next dev\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;next build\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;next start\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;prettier -c --write \\\u0026#34;*/**\\\u0026#34;\u0026#34;, \u0026#34;lint\u0026#34;: \u0026#34;eslint . --ext .ts,.tsx,\u0026#34;, \u0026#34;lint:fix\u0026#34;: \u0026#34;eslint . --ext .ts,.tsx, --fix\u0026#34; }, /** @type {import(\u0026#39;next\u0026#39;).NextConfig} */ const nextConfig = { output: \u0026#39;export\u0026#39;, reactStrictMode: true, swcMinify: true, images: { unoptimized: true, }, } export default nextConfig Kiểm tra sự khác biệt sau khi sửa đổi file bằng lệnh git diff. Sau đó chúng ta sẽ tạo 1 commit mới và push code lên repository. Amplify sẽ trigger build lại CI/CD để build code và deploy.\ngit diff git add . git commit -m \u0026#34;fixed(config): SSG correct build\u0026#34; git push -f origin main Ở thanh sidebar, chọn Rewrites and redirect. Chọn Edit, trong phần Type chọn 404(Redirect) và phần Target address trỏ về file 404.html Amplify đã deploy SSG app lên trên internet, ở phần tiếp theo chúng ta sẽ custom domain với Godaddy. "
},
{
	"uri": "/vi/4-amplifyhosting/",
	"title": "Hosting trên Amplify",
	"tags": [],
	"description": "",
	"content": "Lỗi detect từ Amplify Vấn đề được đề cập ở Chapter 1 - Giới thiệu Amplify, Chúng ta có vấn đề cần giải quyết khi deploy code lên trên Amplify và Amplify tạo ra bản build cho SSR app thay vì SSG app như chúng ta mong muốn. Ở đây, mình sẽ mô tả lỗi detect build SSR app và build SSG app trong Amplify và cách khắc phục.\nDưới đây folder sau khi build của Next.js 14. Self-Hosting và chúng ta để ý đến chi tiết này Static Exports từ document của Next.js 14 Và đây là cách Amplify xác định Next.js app của mình là SSR app hay SSG app. Document của Amplify hướng dẫn. =\u0026gt; Chúng ta nhận ra rằng, Next.js 14 và AWS Amplify đang xông đột với nhau. Chúng ta sẽ xem xét cách Amplify xác định baseDirectory để deploy code. Chúng ta sẽ sử dụng file amplify.yml này cho phạm vi workshop vì đây là config build cho SSG app đúng. Dưới đây là ví dụ Amplify detect build SSG app sai và build lỗi. Do trong package.json cấu hình như bên dưới, đây là config build đúng của Next.js 14. Mà Amplify detect là build SSR app =\u0026gt; Build sai và không thể deploy. Đây là file package.json\n\u0026#34;scripts\u0026#34;: { \u0026#34;dev\u0026#34;: \u0026#34;next dev\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;next build\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;next start\u0026#34;, \u0026#34;format\u0026#34;: \u0026#34;prettier -c --write \\\u0026#34;*/**\\\u0026#34;\u0026#34;, \u0026#34;lint\u0026#34;: \u0026#34;eslint . --ext .ts,.tsx,\u0026#34;, \u0026#34;lint:fix\u0026#34;: \u0026#34;eslint . --ext .ts,.tsx, --fix\u0026#34; }, Ở lỗi này, Amplify đang trỏ vào out folder do file amplify.yml để baseDirectory là out. Amplify không thể tìm được file required-server-file.json vì đây không phải SSR build. Hãy so sánh các file sau khi Next build ở phần đầu, mình đề cập sự khác nhau giữa 2 cách build. Để khắc phục lỗi trên, chúng ta sẽ follow ở phần tiếp theo.\n"
},
{
	"uri": "/vi/5-customdomain/",
	"title": "Cấu hình custom domain",
	"tags": [],
	"description": "",
	"content": "Đối với tài khoản IAM AmplifyDev, khi chọn vào Domain management chúng ta không thể cấu hình domain cho app. Vì Route 53 là dịch vụ global nên chúng ta cần phải phân quyền rõ ràng cho từng user, hãy thoát ra tài khoản IAM AmplifyDev và đăng nhập bằng tài khoản IAM AdminUser Sau khi đăng nhập, chúng ta sẽ chọn Domain management, sau đó chọn Configure domain và để mặc định 2 subdomain trỏ vào nhánh main. Chọn Amplify managed certificate để cung cấp SSL cho web của bạn. Chọn Save để tiếp tục.\nOptional: sau này chúng ta có thể tạo thêm nhiều subdomain trỏ các nhánh khác trên repository. Ví dụ chúng ta tạo 1 nhánh dev trên github và phát triển các tính năng mới. Tại Domain management, chúng ta cấu hình subdomain là dev và trỏ vào nhánh dev trên repository github. Chúng ta có thể truy cập vào dev.your-domain.com để thấy các tính năng đang phát triển. Amplify sẽ tạo ra CNAME record trong Route 53 và cung cấp SSL cho web app của bạn. Sau khoảng 15-30 phút, chúng ta kiểm tra tình trạng của domain. Quay lại phần app của chúng ta, URL đã thay đổi đúng với domain của mình cấu hình. Kiểm tra kết quả. "
},
{
	"uri": "/vi/6-pushcommit/",
	"title": "Kiểm tra CI/CD",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ đẩy lên trên github 2 bài viết mới. Amplify sẽ nhận biết sự thay đổi của repository trên github và tiến hành build lại app. Sau khi build chúng ta sẽ kiểm tra kết quả. Next.js có thu thập 1 số thông tin để làm cho app để dễ dàng monitoring hơn. Why is telemetry collected? Note: Trong quá trình Amplify trigger build lại app, nếu bạn reload trang của mình trong quá trình build thì sẽ không bị downtime ( Atomic deployments ). Trong phần giới thiệu về Amplify có để cập việc sử dụng tài nguyên của AWS như thế nào. Thì Amplify có tích hợp CloudWatch service cho chúng ta quản lý, click vào All metric tại sidebar và chọn Usage và tiếp tục chọn By AWS Resource. "
},
{
	"uri": "/vi/7-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Dọn dẹp tài nguyên We will proceed to delete the resources in the following order:\nXóa project trên Amplify. Xóa CNAME record do Amplify tạo ra trong Route 53. Xóa hosted zone trong Route 53. Xóa các user trong IAM. Ở Amplify dashboard, chọn blog và chọn Action, tiếp tục chọn Delete app. Gõ delete để xác nhận xóa. Popup thông báo xóa thành công project. Ở Route 53 dashboard, chọn Hosted zone và chọn domain chúng ta đang sử dụng. Chọn record CNAME được tạo ra bởi Amplify và chọn Delete record. Chọn delete để xác nhận xóa. Quay lại Route 53 dashboard, chọn hosted zone đang sử dụng và chọn Delete. Gõ delete để xác nhận xóa. Ở IAM dashboard, chọn 2 user AmplifyDev và AdminUser và chọn Delete. Gõ delete để xác nhận xóa. Chúng ta đã hoàn thành việc xóa tất cả resourced đang sử dụng.\n"
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]